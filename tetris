#!/usr/bin/env ruby

require 'gosu'
require 'texplay'
require 'unobservable'
require 'singleton'

Coord = Struct.new(:x,:y)

class Coord

  def dup
    Coord.new(self.x,self.y)
  end

end

class Game

  BLOCK_WIDTH = 20

  def initialize
    @move_clock = MovementClock.new
    @player = Player.new
    @board1 = Board.new
    @board2 = Board.new
    @screen = Screen.new(@player,@board1,@board2)
    @screen.caption = "Doubletris"
    @window = GameWindow.new(@screen.width, @screen.height, false)
  end

  def start
    @window.show
  end

  def draw
    unless @background
      @background = TexPlay::create_blank_image($window, WINDOW_WIDTH, WINDOW_HEIGHT)
      @background.rect 0,0,WINDOW_WIDTH,WINDOW_HEIGHT, :color => :black, :fill => true
    end

    @background.draw(0,0,1)
    @screen1.draw(where)
    @screen2.draw(where)
    @score.draw

    flush
  end

end

class Screen

  def initialize(player,board1,board2)
    @player = player
    @board1 = board1
    @board2 = board2
  end

  def width
    Board::WIDTH * Game::BLOCK_WIDTH * 2
  end

  def height
    Board::HEIGHT * Game::BLOCK_WIDTH
  end

  def draw(where)
    @board.draw(where)
    @peice.draw(where)
  end

end

class Score

  def initialize(board1,board2)
    @value = 0
    @font = Gosu::Font.new(self, Gosu::default_font_name, (BLOCK_WIDTH/2).to_i )
    board1.row_removed.register self, :scored
    board2.row_removed.register self, :scored
  end

  def scored
    @value += 100
  end

  def draw
    @font.draw(@value.to_s,(BLOCK_WIDTH/2).to_i,(BLOCK_WIDTH/2).to_i, 3, 1.0, 1.0, 0xffffff00)
  end
end

class Player
  def initialize
    @piece1 = PieceGenerator.from_random
    @piece2 = PieceGenerator.from_random
  end

  def apply_peice
    @board.merge!(@peice, @position)
    @peice = PieceGenerator.from_random
    @position = Coord.new(0,0)
  end
end

class MovementClock

  include Singleton
  include Unobservable::Support

  MOVE_PERIOD = 0.5 # seconds

  attr_event :move

  def initialize
    @last_move_time = Time.now
  end

  def time_for_move?
    now = Time.now
    if @last_move_time
      now - @last_move_time > MOVE_PERIOD
    else
      @last_move_time = now
    end
  end

  def update
    if time_for_move?
      @last_logic_time = Time.now
      raise_event :move
    end
  end

end

class InputClock

  include Singleton
  include Unobservable::Support

  attr_event :input

  INPUT_DELAY = 0.1

  def time_for_input?
    now = Time.now
    if @last_input_time
      now - @last_input_time > INPUT_DELAY
    else
      @last_input_time = now
    end
  end

  def update

    if time_for_input?
      @last_input_time = Time.now
      raise_event :input
    end

  end


  def button_down(id)
    if button_down? Gosu::KbDown or button_down? Gosu::GpDown
      logic_update
    end
    if id == Gosu::KbEscape or id == Gosu::KbQ
      close
    end
  end
  
  def grid_to_screen(x,y)
    Coord.new(x * BLOCK_WIDTH,y * BLOCK_WIDTH)
  end
  

end

class Grid

  # A grid of true/false values that represents a peice or the board

  attr_reader :grid, :width, :height

  def initialize(width,height)
    @width = width
    @height = height
    @grid = []
    (0..@width - 1).each do |x|
      @grid[x] = []
      (0..@height - 1).each do |y|
        @grid[x][y] = false
      end
    end
  end

  def each_cell
    (0..@width - 1).each do |x|
      (0..@height - 1).each do |y|
        yield Coord.new(x, y), self.grid[x][y]
      end
    end
  end

  def merge!(other,origin)
    # other is merged into self.
    if not other.within?(self,origin)
      raise "trying to merge a peice that lies (partially) outside my border"
    end

    other.each_cell do |other_coord, other_value|
      self.grid[origin.x + other_coord.x][origin.y + other_coord.y] = true if other_value
    end

  end

  def within?(other,origin)
    # does I lie within the bounds of this other grid?

    if origin.x <0 or origin.y < 0
      return false
    end

    if origin.x + self.width - 1 > other.width - 1 or origin.y + self.height - 1 > other.height - 1
      return false
    end

    true
  end

  def contains_coord?(coord)
    coord.x >= 0 and coord.x < width and coord.y >= 0 and coord.y < height
  end

  def collides_with?(other,origin)
    # origin is where self is relative to other.
    # so its the positive coordinates on 'other' where 'self' happens to be.
    collided = false
    self.each_cell do |coord,value|
      local = Coord.new( origin.x + coord.x, origin.y + coord.y)
      if value and other.contains_coord?(local) and other.grid[local.x][local.y]
        collided = true
        break
      end
    end
    collided
  end

  def self.grid_to_screen(grid_position)
    Coord.new(grid_position.x * GameWindow::BLOCK_WIDTH, grid_position.y * GameWindow::BLOCK_WIDTH)
  end

  def draw(grid_position)
    unless @block
      puts "create block for render"
      @block = TexPlay::create_blank_image($window, GameWindow::BLOCK_WIDTH, GameWindow::BLOCK_WIDTH)
      @block.rect 0,0,GameWindow::BLOCK_WIDTH,GameWindow::BLOCK_WIDTH, :color => :red, :fill => true
    end

    self.each_cell do |cell_coord,value|
      if value
        position = Grid.grid_to_screen(Coord.new(grid_position.x + cell_coord.x,grid_position.y + cell_coord.y))
        @block.draw(position.x, position.y, 1)
      end
    end
  end

end

class Board < Grid;

  include Unobservable::Support

  attr_event :row_removed

  WIDTH = 4
  HEIGHT = 8

  def initialize(move_clock)
    move_clock.move.register(self,:move)
  end


  def completed_rows

    rows = []
    (0..height-1).each do |y|

      complete = true
      (0..width-1).each do |x|
        if not self.grid[x][y]
          complete = false
          break
        end
      end

      if complete
        rows += [y]
      end
    end

    rows
  end

  def remove_row!(y)

    # clear the row
    (0..width-1).each do |x|
      self.grid[x][y] = false
    end
    
  end
  
  def collapse!
    
    work_done = true
    while work_done
      # keep looping until things stop moving.
      work_done = false
      each_cell do |coord, value|
        if value and contains_coord?(Coord.new(coord.x,coord.y + 1)) and not grid[coord.x][coord.y + 1]
          grid[coord.x][coord.y] = false
          grid[coord.x][coord.y + 1] = true
          work_done = true
        end
      end
    end

  end


  def move

    completed_rows.each do |y|
      remove_row!(y)
      raise_event :row_removed
    end
    collapse!

  end

  private
  
  def self.test
    board = Board.new(2,2)
    board.grid[0][1] = true
    board.grid[1][1] = true
    raise unless board.completed_rows == [1]
    
    board.remove_row!(1)
    raise if board.grid[0][1] or board.grid[1][1] 
    
    board.each_cell { |coord, value| board.grid[coord.x][coord.y] = true }
    board.remove_row!(1)
    board.collapse!
    raise if board.grid[0][0] or board.grid[1][0] or not board.grid[0][1] or not board.grid[1][1]
    puts "tested"
  end
  
  test

end

class Piece < Grid;

  def initialize(move_clock, board)
    @position = Coord.new(0,0)
    @board = board
    move_clock.move.register self, :move
    input_clock.input.register self, :input
  end

  def rotate
    rotated = Piece.new(height,width)
    each_cell do |coord,value|
      if value
        rotated.grid[coord.y][coord.x] = true
      end
    end

    rotated
  end

  def move

    # is the game over already?
    if collides_with?(@board,@position)
      puts "game ended for lack of space"
      close
    end

    # try moving down the board
    new_position = @position.dup
    new_position.y += 1

    if not within?(@board, new_position)
      apply_peice
      puts "peice passed off end of board"
    elsif collides_with?(@board,new_position)
      apply_peice
      puts "peice stopped moving down"
    else
      # everything is good, just continue moving down the board
      @position = new_position
    end

  end

  def input

    if button_down? Gosu::KbUp or button_down? Gosu::GpUp
      new_peice = @peice.rotate
      if @peice.within?(@board,@position) and not @peice.collides_with?(@board,@position)
        @peice = new_peice
      end
    end

    new_position = @position.dup

    if button_down? Gosu::KbLeft or button_down? Gosu::GpLeft
      new_position.x -= 1
    elsif  button_down? Gosu::KbRight or button_down? Gosu::GpRight
      new_position.x += 1
    end

    if not @peice.within?(@board,new_position)
      # can't accept this new position, its out of obunds.
    elsif @peice.collides_with?(@board, new_position)
      # can't accept this position, another piece is in the way
    else
      # accept this new position.
      @position = new_position
    end

    puts "now: #{Time.now} position: #{@position}"

  end


end


class PieceGenerator

  STRAIGHT = Piece.new(1,4)
  STRAIGHT.grid[0][0] = true
  STRAIGHT.grid[0][1] = true
  STRAIGHT.grid[0][2] = true
  STRAIGHT.grid[0][3] = true

  DOT = Piece.new(1,1)
  DOT.grid[0][0] = true
  
  TRION = Piece.new(2,3)
  TRION.grid[0][0] = true
  TRION.grid[0][1] = true
  TRION.grid[1][1] = true
  TRION.grid[0][2] = true
  
  LANGLE = Piece.new(2,3)
  LANGLE.grid[0][0] = true
  LANGLE.grid[0][1] = true
  LANGLE.grid[1][1] = true
  LANGLE.grid[1][2] = true
  
  RANGLE = Piece.new(2,3)
  RANGLE.grid[1][0] = true
  RANGLE.grid[1][1] = true
  RANGLE.grid[0][1] = true
  RANGLE.grid[0][2] = true

  SQUARE = Piece.new(2,2)
  SQUARE.grid[0][0] = true
  SQUARE.grid[0][1] = true
  SQUARE.grid[1][0] = true
  SQUARE.grid[1][1] = true

  PIECES = [STRAIGHT,DOT, TRION, LANGLE, RANGLE, SQUARE]

  def self.from_random
    PIECES.sample
  end

  # test
  raise unless STRAIGHT.collides_with?(STRAIGHT,Coord.new(0,0))
  raise unless DOT.collides_with?(DOT,Coord.new(0,0))
  raise unless STRAIGHT.within?(STRAIGHT,Coord.new(0,0))
  raise unless DOT.within?(DOT,Coord.new(0,0))
  raise unless STRAIGHT.collides_with?(DOT,Coord.new(0,0))
  raise unless DOT.collides_with?(STRAIGHT,Coord.new(0,0))
  raise unless DOT.within?(STRAIGHT, Coord.new(0,0))
  raise if STRAIGHT.within?(DOT,Coord.new(0,0))

  # grid collision tests
  test_board = Board.new(4,8)
  test_board.merge!(DOT,Coord.new(0,0))
  raise unless DOT.within?(test_board,Coord.new(0,0))
  raise unless DOT.collides_with?(test_board,Coord.new(0,0))

end


Game.new.start

